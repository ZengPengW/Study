package À¶ÇÅ±­;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;


public class Testcs {
	private static class Node{
		ArrayList<Integer> go=new ArrayList<Integer>();
		ArrayList<Integer> val=new ArrayList<Integer>();
	}
	public static void main(String[] args) throws IOException {
	//	Scanner scan=new Scanner(System.in);
		BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
		int t,r,p,s;
		String []strin;
		strin=in.readLine().split(" ");
		t=Integer.parseInt(strin[0]);
		r=Integer.parseInt(strin[1]);
		p=Integer.parseInt(strin[2]);
		s=Integer.parseInt(strin[3]);
		
		Node[] node=new Node[t+1];
	for (int j = 0; j <=t; j++) {
		node[j]=new Node();
	}
	
		int Ai,Bi,Ci;
		for (int i = 0; i < r; i++) {
			strin=in.readLine().split(" ");
			Ai=Integer.parseInt(strin[0]);
			Bi=Integer.parseInt(strin[1]);
			Ci=Integer.parseInt(strin[2]);
			node[Ai].go.add(Bi);
			node[Ai].val.add(Ci);
			node[Bi].go.add(Ai);
			node[Bi].val.add(Ci);
			
		}
		for (int i = 0; i < p; i++) {
			strin=in.readLine().split(" ");
			Ai=Integer.parseInt(strin[0]);
			Bi=Integer.parseInt(strin[1]);
			Ci=Integer.parseInt(strin[2]);
			node[Ai].go.add(Bi);
			node[Ai].val.add(Ci);
		}
		
		long []v=new long[t+1];
		for (int i = 0; i <=t; i++) {
			v[i]=0x7fffffffffffffffL;
		}
		v[s]=0;
		
		Spfa(node, v, t, s);
	}
	
	
	
	public static void Spfa(Node[] node,long []v,int n,int s) {
		Queue<Integer> que=new LinkedList<Integer>();
		que.offer(s);
		
		while (!que.isEmpty()) {
			int id=que.poll();
			
			for (int i =node[id].go.size()-1; i>=0; i--) {
				int go=node[id].go.get(i);
				int val=node[id].val.get(i);
				
				if(v[go]>v[id]+val) {
					
					v[go]=val+v[id];
					//System.out.println(id+" "+i+" "+v[i]);
					if(!que.contains(go))que.offer(go);
				}
			}	
		}
		
		for (int i=1;i<=n;i++) {
			if(v[i]==0x7fffffffffffffffL)System.out.println("NO PATH");
			else System.out.println(v[i]);
		}
	}
	
	
}
